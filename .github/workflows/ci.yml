name: CI

on:
  pull_request:
    branches: ['**']
  push:
    branches: ['**']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  build_android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { lfs: true }
      - name: Git LFS
        run: |
          git lfs install
          git lfs fetch --all || true
          git lfs checkout

      # NEW: make gradlew runnable & normalize line endings
      - name: Fix gradlew permissions (Linux-safe)
        run: |
          if [ -f android/gradlew ]; then
            # strip CRLF if present (avoids '#!/bin/sh^M' issues)
            sed -i 's/\r$//' android/gradlew || true
            chmod +x android/gradlew || true
            echo "gradlew perms/lf fixed:"
            ls -l android/gradlew
            git ls-files --stage android/gradlew || true
          else
            echo "android/gradlew not found" && exit 1
          fi

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle
      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.35.4'
          cache: true
      - name: Show Flutter/Dart versions
        run: |
          flutter --version
          dart --version
      - name: Create CI .env file
        run: |
          cat > .env << EOF
          ENV=ci
          API_BASE_URL=https://example.invalid
          SUPABASE_URL=
          SUPABASE_ANON_KEY=
          SENTRY_DSN=
          EOF
      - name: Install Android SDK (cmdline-tools)
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: latest
          packages: >
            platform-tools
            platforms;android-34
            build-tools;34.0.0
          accept-android-sdk-licenses: true
      - name: Debug environment
        run: |
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          ls -la android/ || true
      - name: Flutter pub get (retry)
        run: |
          for i in {1..4}; do flutter pub get && break || sleep 10; done
      - name: Flutter doctor
        run: flutter doctor -v
      - name: Verify Flutter/Dart versions
        run: |
          flutter --version
          dart --version
      - name: Clean Gradle cache
        run: |
          cd android
          ./gradlew clean || true
          cd ..
          flutter clean
      - name: Android diag (versions)
        run: |
          flutter --version
          dart --version
          cd android && ./gradlew -v

      - name: Build Android Debug
        run: flutter build apk --debug --no-shrink --verbose
      - name: List build outputs
        run: |
          find build -name "*.apk" || true
      - name: Upload Android Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: Android Debug APK
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/apk/debug/app-debug.apk
          if-no-files-found: warn

  build_windows:
    runs-on: windows-latest
    steps:
      - name: Enable long paths
        run: git config --system core.longpaths true

      - uses: actions/checkout@v4
        with: { lfs: true }

      - name: Git LFS
        shell: bash
        run: |
          git lfs install
          git lfs fetch --all || true
          git lfs checkout

      - uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.35.4'
          cache: true

      - name: Show Flutter/Dart versions
        shell: bash
        run: |
          flutter --version
          dart --version

      - name: Create CI .env file
        shell: bash
        run: |
          cat > .env << EOF
          ENV=ci
          API_BASE_URL=https://example.invalid
          SUPABASE_URL=
          SUPABASE_ANON_KEY=
          SENTRY_DSN=
          EOF

      - name: Enable Windows desktop
        shell: bash
        run: flutter config --enable-windows-desktop

      - name: Flutter pub get (retry)
        shell: bash
        run: |
          for i in {1..4}; do flutter pub get && break || sleep 10; done

      - name: Doctor
        shell: bash
        run: flutter doctor -v

      - name: Build Windows Release
        shell: bash
        run: flutter build windows --release

      - name: Upload Windows Release
        uses: actions/upload-artifact@v4
        with:
          name: Windows Release
          path: build/windows/x64/runner/Release/**
          if-no-files-found: error

  android_qa_smoke:
    needs: build_android
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      # Download the built APK artifact
      - uses: actions/download-artifact@v4
        with:
          name: Android Debug APK
      # Hardened emulator + robust ADB smoke
      - name: Run smoke test via adb (hardened)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          target: google_apis
          disable-animations: true
          force-avd-creation: true
          emulator-options: -no-window -no-snapshot -gpu swiftshader_indirect -no-audio -no-boot-anim -camera-back none -camera-front none
          script: |
            set -euo pipefail

            retry() { n=0; until "$@"; do n=$((n+1)); [ $n -ge 6 ] && { echo "retry: giving up"; exit 1; }; echo "retry $n for: $*"; sleep 10; done; }

            echo "Start/refresh adb server"
            adb kill-server || true
            adb start-server || true
            adb version || true

            echo "Wait for emulator device"
            retry adb wait-for-device

            echo "List devices"
            adb devices

            echo "Ensure boot completed"
            retry sh -c 'adb shell getprop sys.boot_completed | grep -q 1'
            adb shell settings put system screen_off_timeout 600000 || true
            adb shell svc power stayon true || true

            echo "Install APK with retries"
            retry sh -c 'adb install -r -d -t app-debug.apk'

            echo "Launch MainActivity with retries"
            PKG=com.holdthatthought
            ACT=.MainActivity
            retry sh -c "adb shell am start -W -n $PKG/$ACT"

            echo "Verify process is running"
            for i in 1 2 3 4 5 6; do
              if adb shell pidof $PKG >/dev/null 2>&1; then
                echo "App is running"
                exit 0
              fi
              sleep 5
            done
            echo "App did not stay running"; exit 1

      # Always try to capture logcat on failure for debugging
      - name: Collect logcat on failure
        if: failure()
        run: |
          set -e
          mkdir -p smoke-logs
          adb logcat -d > smoke-logs/logcat.txt || echo "no logcat"
      - name: Upload smoke logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: android-smoke-logs
          path: smoke-logs/**

  notify:
    needs: [build_android, build_windows]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: Comment on PR when artifacts are ready
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const message = `âœ… Artifacts are ready:
            - Windows Release (zip)
            - Android Debug APK
            Please complete Artifacts-only QA and, if it matches the checklist, comment \`QA: PASS\``;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });


