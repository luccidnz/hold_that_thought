// Mocks generated by Mockito 5.4.4 from annotations
// in hold_that_thought/test/i18n/app_localizations_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:flutter/material.dart' as _i9;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i8;
import 'package:hold_that_thought/notes/note_model.dart' as _i2;
import 'package:hold_that_thought/notes/notes_repository.dart' as _i5;
import 'package:hold_that_thought/sync/sync_service.dart' as _i3;
import 'package:hold_that_thought/theme/app_theme.dart' as _i10;
import 'package:hold_that_thought/theme/theme_controller.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNote_0 extends _i1.SmartFake implements _i2.Note {
  _FakeNote_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSyncResult_1 extends _i1.SmartFake implements _i3.SyncResult {
  _FakeSyncResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteSnapshot_2 extends _i1.SmartFake
    implements _i3.RemoteSnapshot {
  _FakeRemoteSnapshot_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeState_3 extends _i1.SmartFake implements _i4.ThemeState {
  _FakeThemeState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i5.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i3.SyncStatus> get syncStatus => (super.noSuchMethod(
        Invocation.getter(#syncStatus),
        returnValue: _i6.Stream<_i3.SyncStatus>.empty(),
      ) as _i6.Stream<_i3.SyncStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  List<_i2.Note> getFilteredNotes({
    String? query,
    Set<String>? tags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredNotes,
          [],
          {
            #query: query,
            #tags: tags,
          },
        ),
        returnValue: <_i2.Note>[],
      ) as List<_i2.Note>);

  @override
  List<_i2.Note> getPinnedNotes() => (super.noSuchMethod(
        Invocation.method(
          #getPinnedNotes,
          [],
        ),
        returnValue: <_i2.Note>[],
      ) as List<_i2.Note>);

  @override
  List<_i2.Note> getUnpinnedNotes({
    String? query,
    Set<String>? tags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnpinnedNotes,
          [],
          {
            #query: query,
            #tags: tags,
          },
        ),
        returnValue: <_i2.Note>[],
      ) as List<_i2.Note>);

  @override
  Set<String> getDistinctTags() => (super.noSuchMethod(
        Invocation.method(
          #getDistinctTags,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  bool exists(String? id) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [id],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<_i2.Note> create({
    required String? title,
    String? body,
    required bool? isPinned,
    List<String>? tags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #title: title,
            #body: body,
            #isPinned: isPinned,
            #tags: tags,
          },
        ),
        returnValue: _i6.Future<_i2.Note>.value(_FakeNote_0(
          this,
          Invocation.method(
            #create,
            [],
            {
              #title: title,
              #body: body,
              #isPinned: isPinned,
              #tags: tags,
            },
          ),
        )),
      ) as _i6.Future<_i2.Note>);

  @override
  _i6.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> update(_i2.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [note],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> syncOnce() => (super.noSuchMethod(
        Invocation.method(
          #syncOnce,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clearAllBoxes() => (super.noSuchMethod(
        Invocation.method(
          #clearAllBoxes,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncService extends _i1.Mock implements _i3.SyncService {
  MockSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ConflictStrategy get strategy => (super.noSuchMethod(
        Invocation.getter(#strategy),
        returnValue: _i3.ConflictStrategy.preferNewest,
      ) as _i3.ConflictStrategy);

  @override
  _i6.Future<_i3.SyncResult> pushChanges(List<_i3.NoteChange>? ops) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushChanges,
          [ops],
        ),
        returnValue: _i6.Future<_i3.SyncResult>.value(_FakeSyncResult_1(
          this,
          Invocation.method(
            #pushChanges,
            [ops],
          ),
        )),
      ) as _i6.Future<_i3.SyncResult>);

  @override
  _i6.Future<_i3.RemoteSnapshot> pullChanges(DateTime? since) =>
      (super.noSuchMethod(
        Invocation.method(
          #pullChanges,
          [since],
        ),
        returnValue: _i6.Future<_i3.RemoteSnapshot>.value(_FakeRemoteSnapshot_2(
          this,
          Invocation.method(
            #pullChanges,
            [since],
          ),
        )),
      ) as _i6.Future<_i3.RemoteSnapshot>);
}

/// A class which mocks [ThemeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeController extends _i1.Mock implements _i4.ThemeController {
  MockThemeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i8.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i6.Stream<_i4.ThemeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.ThemeState>.empty(),
      ) as _i6.Stream<_i4.ThemeState>);

  @override
  _i4.ThemeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeThemeState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.ThemeState);

  @override
  set state(_i4.ThemeState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ThemeState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeThemeState_3(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i4.ThemeState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> setMode(_i9.ThemeMode? themeMode) => (super.noSuchMethod(
        Invocation.method(
          #setMode,
          [themeMode],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setAccent(_i10.Accent? accent) => (super.noSuchMethod(
        Invocation.method(
          #setAccent,
          [accent],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  bool updateShouldNotify(
    _i4.ThemeState? old,
    _i4.ThemeState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i8.RemoveListener addListener(
    _i11.Listener<_i4.ThemeState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i8.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
