// Mocks generated by Mockito 5.4.4 from annotations
// in hold_that_thought/test/routing/route_guard_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:hold_that_thought/notes/note_model.dart' as _i2;
import 'package:hold_that_thought/notes/notes_repository.dart' as _i3;
import 'package:hold_that_thought/sync/sync_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNote_0 extends _i1.SmartFake implements _i2.Note {
  _FakeNote_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesRepository extends _i1.Mock implements _i3.NotesRepository {
  MockNotesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.SyncStatus> get syncStatus => (super.noSuchMethod(
        Invocation.getter(#syncStatus),
        returnValue: _i4.Stream<_i5.SyncStatus>.empty(),
      ) as _i4.Stream<_i5.SyncStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  List<_i2.Note> getFilteredNotes({
    String? query,
    Set<String>? tags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredNotes,
          [],
          {
            #query: query,
            #tags: tags,
          },
        ),
        returnValue: <_i2.Note>[],
      ) as List<_i2.Note>);

  @override
  List<_i2.Note> getPinnedNotes() => (super.noSuchMethod(
        Invocation.method(
          #getPinnedNotes,
          [],
        ),
        returnValue: <_i2.Note>[],
      ) as List<_i2.Note>);

  @override
  List<_i2.Note> getUnpinnedNotes({
    String? query,
    Set<String>? tags = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnpinnedNotes,
          [],
          {
            #query: query,
            #tags: tags,
          },
        ),
        returnValue: <_i2.Note>[],
      ) as List<_i2.Note>);

  @override
  Set<String> getDistinctTags() => (super.noSuchMethod(
        Invocation.method(
          #getDistinctTags,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  bool exists(String? id) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [id],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i2.Note> create({
    required String? title,
    String? body,
    required bool? isPinned,
    List<String>? tags = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #title: title,
            #body: body,
            #isPinned: isPinned,
            #tags: tags,
          },
        ),
        returnValue: _i4.Future<_i2.Note>.value(_FakeNote_0(
          this,
          Invocation.method(
            #create,
            [],
            {
              #title: title,
              #body: body,
              #isPinned: isPinned,
              #tags: tags,
            },
          ),
        )),
      ) as _i4.Future<_i2.Note>);

  @override
  _i4.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> update(_i2.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [note],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> syncOnce() => (super.noSuchMethod(
        Invocation.method(
          #syncOnce,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllBoxes() => (super.noSuchMethod(
        Invocation.method(
          #clearAllBoxes,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
